<!doctype html>
<html lang="{{ metadata.language }}">
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">
		<meta name="theme-color" content="white">
		<title>{{ title or metadata.title }}</title>
		<meta name="description" content="{{ description or metadata.description }}">

		{#- Atom and JSON feeds included by default #}
		<link rel="alternate" href="/feed/feed.xml" type="application/atom+xml" title="{{ metadata.title }}">
		<link rel="alternate" href="/feed/feed.json" type="application/json" title="{{ metadata.title }}">

		{#- Uncomment this if youâ€™d like folks to know that you used Eleventy to build your site!  #}
		{#- <meta name="generator" content="{{ eleventy.generator }}"> #}

		{#-
		CSS bundles are provided via the `eleventy-plugin-bundle` plugin:
		1. You can add to them using `{% css %}`
		2. You can get from them using `{% getBundle "css" %}` or `{% getBundleFileUrl "css" %}`
		3. You can do the same for JS: {% js %}{% endjs %} and <script>{% getBundle "js" %}</script>
		4. Learn more: https://github.com/11ty/eleventy-plugin-bundle
		#}

		{#- Add an arbitrary string to the bundle #}
		{%- css %}* { box-sizing: border-box; }{% endcss %}
		{#- Add the contents of a file to the bundle #}
		{%- css %}{% include "public/css/index.css" %}{% endcss %}
		{#- Or add from node_modules #}
		{# {%- css %}{% include "node_modules/prismjs/themes/prism-okaidia.css" %}{% endcss %} #}

		{#- Render the CSS bundle using Inlined CSS (for the fastest site performance in production) #}
		<style>{% getBundle "css" %}</style>

		{#- Renders the CSS bundle using a separate file, if you can't set CSP directive style-src: 'unsafe-inline' #}
		{#- <link rel="stylesheet" href="{% getBundleFileUrl "css" %}"> #}
	</head>
	<body>
		<div class="pantalla">
			<a href="#skip" class="visually-hidden">Skip to main content</a>

			<header>
				<a href="/" class="home-link">{{ metadata.title }}</a>

				{#- Read more about `eleventy-navigation` at https://www.11ty.dev/docs/plugins/navigation/ #}
				<nav>
					<h2 class="visually-hidden">Top level navigation menu</h2>
					<ul class="nav">
					{%- for entry in collections.all | eleventyNavigation %}
						<li class="nav-item"><a href="{{ entry.url }}"{% if entry.url == page.url %} aria-current="page"{% endif %}>{{ entry.title }}</a></li>
					{%- endfor %}
					</ul>
				</nav>
			</header>

			<main id="skip">
				{{ content | safe }}
			</main>

			<footer>
				{#- ðŸŒˆ Rainbow button #}
				<button onclick="rainbow()">ðŸŒˆ Rainbow Me</button>
				<span id="chromagen-hue"></span>
				<span>powered by <a href="https://github.com/rdela/eleventeen">eleventeen</a></span>
			</footer>

			<!-- This page `{{ page.url | htmlBaseUrl }}` was built on {% currentBuildDate %} -->
			{% js %}
				{% include "node_modules/@famebot/chromagen/dist/chromagen.umd.js" %}
			{% endjs %}
			{% js %}
const rainbow = () => {
var colorScheme = chromagen();

{#- https://davidwalsh.name/css-variables-javascript #}
const docstyle = document.documentElement.style;
const huedark = `hsl(${colorScheme.hue}, ${colorScheme.saturation}, ${colorScheme.darkness})`;
const huehsl = `hsl(${colorScheme.hue}, ${colorScheme.saturation}, ${colorScheme.lightness})`;
docstyle.setProperty('--active-light', huedark);
docstyle.setProperty('--active-dark', huehsl);
docstyle.setProperty('--background-color-light', huehsl);
docstyle.setProperty('--background-color-dark', huedark);
docstyle.setProperty('--complement', `hsl(${colorScheme.analogous}, ${colorScheme.saturation}, ${colorScheme.lightness})`);
docstyle.setProperty('--complementdark', `hsl(${colorScheme.analogous}, ${colorScheme.saturation}, ${colorScheme.darkness})`);
docstyle.setProperty('--complementdarker', `hsl(${colorScheme.analogous}, ${colorScheme.saturation}, ${colorScheme.darker})`);
docstyle.setProperty('--primary', `hsl(${colorScheme.complement}, ${colorScheme.saturation}, ${colorScheme.lightness})`);
docstyle.setProperty('--primarydark', `hsl(${colorScheme.complement}, ${colorScheme.saturation}, ${colorScheme.darkness})`);
docstyle.setProperty('--primarydarker', `hsl(${colorScheme.complement}, ${colorScheme.saturation}, ${colorScheme.darker})`);
docstyle.setProperty('--text-color-dark', `hsl(${colorScheme.hue}, ${colorScheme.saturation}, ${colorScheme.lighter})`);
docstyle.setProperty('--text-color-light', `hsl(${colorScheme.hue}, ${colorScheme.saturation}, ${colorScheme.darker})`);

function activateColorScheme() {
	const colorSchemeQueryList = window.matchMedia('(prefers-color-scheme: light)');
	if ((colorSchemeQueryList.media === 'not all') 
	|| (colorSchemeQueryList.matches === true)) {
		document.querySelector('meta[name="theme-color"]').setAttribute('content', huehsl);
	} else {
		document.querySelector('meta[name="theme-color"]').setAttribute('content', huedark);
	}
}
const darkPreference = window.matchMedia("(prefers-color-scheme: dark)");
const lightPreference = window.matchMedia("(prefers-color-scheme: light)");
darkPreference.addEventListener("change", e => e.matches && activateColorScheme());
lightPreference.addEventListener("change", e => e.matches && activateColorScheme());
activateColorScheme();

document.querySelector('#chromagen-hue').innerHTML = ` Hue: ${colorScheme.hue} (<a href="https://chromagen.io">Chromagen</a>)`;
}
rainbow();
			{% endjs %}
			{# 
				getBundleFileUrl Writes the bundle content to a content-hashed file location in your 
				output directory and returns the URL to the file for use.
				https://github.com/11ty/eleventy-plugin-bundle/blob/main/README.md#write-a-bundle-to-a-file
				Note that writing bundles to files will likely be slower for 
				empty-cache first time visitors but better cached in the browser 
				for repeat-views (and across multiple pages, too).
				https://mathiasbynens.be/notes/inline-vs-separate-file
				http://calendar.perfplanet.com/2011/why-inlining-everything-is-not-the-answer/
				Choosing not to block render
				https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#blocking_rendering_till_a_script_is_fetched_and_executed
			#}
			<script async src="{% getBundleFileUrl "js" %}"></script>
		</div>
	</body>
</html>